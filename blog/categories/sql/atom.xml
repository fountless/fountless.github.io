<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | +1 to BI]]></title>
  <link href="http://fountless.github.io/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://fountless.github.io/"/>
  <updated>2014-01-13T01:33:40-07:00</updated>
  <id>http://fountless.github.io/</id>
  <author>
    <name><![CDATA[Stu Baker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[T-SQL Date Range From the Current Quarter]]></title>
    <link href="http://fountless.github.io/blog/2013/12/19/t-sql-date-range-from-current-quarter/"/>
    <updated>2013-12-19T01:43:38-07:00</updated>
    <id>http://fountless.github.io/blog/2013/12/19/t-sql-date-range-from-current-quarter</id>
    <content type="html"><![CDATA[<p>A <a href="http://stackoverflow.com/q/20672016/1657324">recent question on StackOverflow</a> got me pondering about dates and quarters.  The user wanted to return data where the date is in the current quarter.  After some Google searches, I found this great solution to <a href="http://www.sqlservercurry.com/2009/05/find-first-and-last-day-of-current.html">find the first and last day of the quarter</a> from SQL Server Curry.  From there I just added 1 day to the last day of the quarter (to make sure we are truly capturing all date/time values in the quarter) and put it all in the <code>WHERE</code> clause:</p>

<p>``` sql
SELECT *
FROM YourTable
WHERE DateColumn >= DATEADD(qq,DATEDIFF(qq,0,GETDATE()),0)</p>

<pre><code>AND DateColumn &lt; DATEADD(dd,1,DATEADD(qq,DATEDIFF(qq,-1,GETDATE()),-1))
</code></pre>

<p>```</p>

<p>You may be wondering &lsquo;why not just compare the quarter and year of the DateColumn to the current date?&rsquo; e.g. <code>WHERE YEAR(DateColumn) = YEAR(GETDATE()) AND DATEPART(QUARTER,DateColumn) = DATEPART(QUARTER,GETDATE())</code>  You can do that and it works fine for small datasets, but using functions on your column in a <code>WHERE</code> clause will result in a non-<a href="http://en.wikipedia.org/wiki/Sargable">sargable</a> query, meaning it can&rsquo;t take advantage of an index on <code>DateColumn</code>.  So go with the uglier, sargable query if you are looking to optimize performance.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I think sargability is a super interesting optimization topic.  In case you were curious, sargable is short for Search ARGument ABLE, and here&rsquo;s a few more articles on the topic if you would like to know more: <a href="http://msmvps.com/blogs/robfarley/archive/2010/01/22/sargable-functions-in-sql-server.aspx">Sargable functions in SQL Server by Rob Farley</a> and <a href="http://stackoverflow.com/q/799584/1657324">stackoverflow: what makes a sql statement sargable</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
